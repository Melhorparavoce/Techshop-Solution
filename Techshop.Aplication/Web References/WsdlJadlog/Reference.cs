//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace Techshop.Aplication.WsdlJadlog {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="NotfisBeanSoapBinding", Namespace="http://jadlogEdiws")]
    public partial class NotfisBeanService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback inserirOperationCompleted;
        
        private System.Threading.SendOrPostCallback cancelarOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public NotfisBeanService() {
            this.Url = global::Techshop.Aplication.Properties.Settings.Default.Techshop_Aplication_WsdlJadlog_NotfisBeanService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event inserirCompletedEventHandler inserirCompleted;
        
        /// <remarks/>
        public event cancelarCompletedEventHandler cancelarCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://jadlogEdiws", ResponseNamespace="http://jadlogEdiws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("inserirReturn")]
        public string inserir(
                    string CodCliente, 
                    string Password, 
                    string Remetente, 
                    string RemetenteCNPJ, 
                    string RemetenteIE, 
                    string RemetenteEndereco, 
                    string RemetenteBairro, 
                    string RemetenteCEP, 
                    string RemetenteTelefone, 
                    string Destino, 
                    string Destinatario, 
                    string DestinatarioCNPJ, 
                    string DestinatarioIE, 
                    string DestinatarioEndereco, 
                    string DestinatarioBairro, 
                    string DestinatarioCEP, 
                    string DestinatarioTelefone, 
                    string ColetaResponsavel, 
                    string Volumes, 
                    string PesoReal, 
                    string Especie, 
                    string Conteudo, 
                    string Nr_Pedido, 
                    string Nr_NF, 
                    string Danfe, 
                    string Serie_Nf, 
                    string ValorDeclarado, 
                    string Observacoes, 
                    string Modalidade, 
                    string wCentroCusto, 
                    string wContaCorrente, 
                    string wTipo, 
                    string CodUnidade) {
            object[] results = this.Invoke("inserir", new object[] {
                        CodCliente,
                        Password,
                        Remetente,
                        RemetenteCNPJ,
                        RemetenteIE,
                        RemetenteEndereco,
                        RemetenteBairro,
                        RemetenteCEP,
                        RemetenteTelefone,
                        Destino,
                        Destinatario,
                        DestinatarioCNPJ,
                        DestinatarioIE,
                        DestinatarioEndereco,
                        DestinatarioBairro,
                        DestinatarioCEP,
                        DestinatarioTelefone,
                        ColetaResponsavel,
                        Volumes,
                        PesoReal,
                        Especie,
                        Conteudo,
                        Nr_Pedido,
                        Nr_NF,
                        Danfe,
                        Serie_Nf,
                        ValorDeclarado,
                        Observacoes,
                        Modalidade,
                        wCentroCusto,
                        wContaCorrente,
                        wTipo,
                        CodUnidade});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void inserirAsync(
                    string CodCliente, 
                    string Password, 
                    string Remetente, 
                    string RemetenteCNPJ, 
                    string RemetenteIE, 
                    string RemetenteEndereco, 
                    string RemetenteBairro, 
                    string RemetenteCEP, 
                    string RemetenteTelefone, 
                    string Destino, 
                    string Destinatario, 
                    string DestinatarioCNPJ, 
                    string DestinatarioIE, 
                    string DestinatarioEndereco, 
                    string DestinatarioBairro, 
                    string DestinatarioCEP, 
                    string DestinatarioTelefone, 
                    string ColetaResponsavel, 
                    string Volumes, 
                    string PesoReal, 
                    string Especie, 
                    string Conteudo, 
                    string Nr_Pedido, 
                    string Nr_NF, 
                    string Danfe, 
                    string Serie_Nf, 
                    string ValorDeclarado, 
                    string Observacoes, 
                    string Modalidade, 
                    string wCentroCusto, 
                    string wContaCorrente, 
                    string wTipo, 
                    string CodUnidade) {
            this.inserirAsync(CodCliente, Password, Remetente, RemetenteCNPJ, RemetenteIE, RemetenteEndereco, RemetenteBairro, RemetenteCEP, RemetenteTelefone, Destino, Destinatario, DestinatarioCNPJ, DestinatarioIE, DestinatarioEndereco, DestinatarioBairro, DestinatarioCEP, DestinatarioTelefone, ColetaResponsavel, Volumes, PesoReal, Especie, Conteudo, Nr_Pedido, Nr_NF, Danfe, Serie_Nf, ValorDeclarado, Observacoes, Modalidade, wCentroCusto, wContaCorrente, wTipo, CodUnidade, null);
        }
        
        /// <remarks/>
        public void inserirAsync(
                    string CodCliente, 
                    string Password, 
                    string Remetente, 
                    string RemetenteCNPJ, 
                    string RemetenteIE, 
                    string RemetenteEndereco, 
                    string RemetenteBairro, 
                    string RemetenteCEP, 
                    string RemetenteTelefone, 
                    string Destino, 
                    string Destinatario, 
                    string DestinatarioCNPJ, 
                    string DestinatarioIE, 
                    string DestinatarioEndereco, 
                    string DestinatarioBairro, 
                    string DestinatarioCEP, 
                    string DestinatarioTelefone, 
                    string ColetaResponsavel, 
                    string Volumes, 
                    string PesoReal, 
                    string Especie, 
                    string Conteudo, 
                    string Nr_Pedido, 
                    string Nr_NF, 
                    string Danfe, 
                    string Serie_Nf, 
                    string ValorDeclarado, 
                    string Observacoes, 
                    string Modalidade, 
                    string wCentroCusto, 
                    string wContaCorrente, 
                    string wTipo, 
                    string CodUnidade, 
                    object userState) {
            if ((this.inserirOperationCompleted == null)) {
                this.inserirOperationCompleted = new System.Threading.SendOrPostCallback(this.OninserirOperationCompleted);
            }
            this.InvokeAsync("inserir", new object[] {
                        CodCliente,
                        Password,
                        Remetente,
                        RemetenteCNPJ,
                        RemetenteIE,
                        RemetenteEndereco,
                        RemetenteBairro,
                        RemetenteCEP,
                        RemetenteTelefone,
                        Destino,
                        Destinatario,
                        DestinatarioCNPJ,
                        DestinatarioIE,
                        DestinatarioEndereco,
                        DestinatarioBairro,
                        DestinatarioCEP,
                        DestinatarioTelefone,
                        ColetaResponsavel,
                        Volumes,
                        PesoReal,
                        Especie,
                        Conteudo,
                        Nr_Pedido,
                        Nr_NF,
                        Danfe,
                        Serie_Nf,
                        ValorDeclarado,
                        Observacoes,
                        Modalidade,
                        wCentroCusto,
                        wContaCorrente,
                        wTipo,
                        CodUnidade}, this.inserirOperationCompleted, userState);
        }
        
        private void OninserirOperationCompleted(object arg) {
            if ((this.inserirCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.inserirCompleted(this, new inserirCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://jadlogEdiws", ResponseNamespace="http://jadlogEdiws", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("cancelarReturn")]
        public string cancelar(int CodCliente, string Password, string NrPED, string Motivo) {
            object[] results = this.Invoke("cancelar", new object[] {
                        CodCliente,
                        Password,
                        NrPED,
                        Motivo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void cancelarAsync(int CodCliente, string Password, string NrPED, string Motivo) {
            this.cancelarAsync(CodCliente, Password, NrPED, Motivo, null);
        }
        
        /// <remarks/>
        public void cancelarAsync(int CodCliente, string Password, string NrPED, string Motivo, object userState) {
            if ((this.cancelarOperationCompleted == null)) {
                this.cancelarOperationCompleted = new System.Threading.SendOrPostCallback(this.OncancelarOperationCompleted);
            }
            this.InvokeAsync("cancelar", new object[] {
                        CodCliente,
                        Password,
                        NrPED,
                        Motivo}, this.cancelarOperationCompleted, userState);
        }
        
        private void OncancelarOperationCompleted(object arg) {
            if ((this.cancelarCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.cancelarCompleted(this, new cancelarCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void inserirCompletedEventHandler(object sender, inserirCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class inserirCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal inserirCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    public delegate void cancelarCompletedEventHandler(object sender, cancelarCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1590.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class cancelarCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal cancelarCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591